import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from fluentogram import TranslatorRunner

from keyboards import keyboards as kb
from utils import db, AdminSG
from config import get_config, Admin


admin = get_config(Admin, 'admin')
admin_id = admin.id
admin_router = Router()

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')


@admin_router.callback_query(F.data == "stats")
async def show_stats(callback: CallbackQuery,
                     i18n: TranslatorRunner):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) != str(admin_id):
        return

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        stats = await db.get_service_stats()
        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞:\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}\n"
            f"üí§ –°–Ω–æ–≤: {stats['dreams_count']}\n"
            f"üí≥ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {stats['orders_count']}\n"
            f"üí∞ –°—É–º–º–∞ –æ–ø–ª–∞—Ç: {stats['total_amount']}"
        )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_text(response, reply_markup=kb.back_to_account(i18n))
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–±–ª–µ–º—ã —Å –ë–î –∏–ª–∏ Telegram API)
        await callback.message.edit_text(
            i18n.error.stats.failed(),  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –æ—à–∏–±–∫–∏
            reply_markup=kb.back_to_account(i18n)
        )
        logger.info(f"–û—à–∏–±–∫–∞ –≤ show_stats: {e}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏


@admin_router.callback_query(F.data == "analyze_reset")
async def analyze_reset(callback: CallbackQuery,
                        i18n: TranslatorRunner,
                        state: FSMContext):
    try:
        await state.set_state(AdminSG.enter_user_id)
        await callback.message.edit_text(
            i18n.enter.userid(),
            reply_markup=kb.back_to_menu(i18n)
        )
    except Exception as e:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å
        await callback.message.answer(
            i18n.error.db_error(),  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            reply_markup=kb.back_to_menu(i18n)
        )
        logger.info(f"–û—à–∏–±–∫–∞ –≤ analyze_reset: {e}")


@admin_router.message(AdminSG.enter_user_id)
async def user_id_handler(message: Message,
                          i18n: TranslatorRunner,
                          state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ user_id –∏–∑ —Ç–µ–∫—Å—Ç–∞
        try:
            _, _, user_id = message.text.split('_')
            user_id = int(user_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_id ‚Äî —á–∏—Å–ª–æ
        except (ValueError, IndexError):
            await message.answer(i18n.error.invalid.userid())
            return

        # –°–±—Ä–æ—Å –¥–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.reset_last_analyze_date(str(user_id))
        await state.clear()
        await message.answer(i18n.analyze.reset.complete(user_id=user_id))
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ Telegram API
        await message.answer(i18n.error.db_error())
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—Ç—Ä—è—Ç—å
        logger.info(f"–û—à–∏–±–∫–∞ –≤ user_id_handler: {e}")