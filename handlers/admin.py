from aiogram import Router, F
from aiogram.types import Message
from fluentogram import TranslatorRunner

from utils import db
from config import get_config, Admin

admin = get_config(Admin, 'admin')
admin_id = admin.id

admin_router = Router()

@admin_router.message(F.text == "/stats")
async def show_stats(message: Message):
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) != str(admin_id):
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_service_stats()
    response = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞:\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}\n"
        f"üí§ –°–Ω–æ–≤: {stats['dreams_count']}\n"
        f"üí≥ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {stats['orders_count']}\n"
        f"üí∞ –°—É–º–º–∞ –æ–ø–ª–∞—Ç: {stats['total_amount']}"
    )
    await message.answer(response)

@admin_router.message(F.text.startswith("/analyze_reset_"))
async def analyze_reset(message: Message):

    _, _, user_id = message.text.split('_')
    await db.reset_last_analyze_date(user_id)
    await message.answer(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - —Å–±—Ä–æ—à–µ–Ω–∞")