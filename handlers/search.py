import logging

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from fluentogram import TranslatorRunner

from keyboards import keyboards as kb
from utils import SearchSG, get_cache

search_router = Router()
logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')


MAX_RESULTS = 5  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞

@search_router.callback_query(F.data == 'search')
async def search_menu(callback: CallbackQuery,
                      state: FSMContext,
                      i18n: TranslatorRunner):
    await state.set_state(SearchSG.search)
    await callback.message.answer(i18n.search.menu(), reply_markup=kb.back_to_menu())


@search_router.message(SearchSG.search)
async def process_search(message: Message, 
                         state: FSMContext, 
                         i18n: TranslatorRunner):
    
    user_id = message.from_user.id
    query = message.text.strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if not query:
        await message.answer(i18n.search.empty_query())
        await state.finish()
        return

    try:
        cache = get_cache(user_id)
    except Exception as e:
        logger.error(f"Error retrieving cache for user {user_id}: {e}")
        await message.answer(i18n.search.cache_error())
        await state.finish()
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ
    if not cache:
        await message.answer(i18n.search.no_data())
        await state.finish()
        return

    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∑–∞–ø–∏—Å—è—Ö
    results = []
    dreams_list = []
    for day, dreams in cache.items():
        for dream in dreams:
            dream_id, title, content, emoji, comment, cover, create_time = dream

            # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
            if (query in title.lower()) or (query in content.lower()):
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = (
                    f"üìÖ {create_time.strftime('%Y-%m-%d')}\n"
                    f"üìå {title}\n"
                    f"üìù {content[:64]}..."  # –ü–µ—Ä–≤—ã–µ 64 —Å–∏–º–≤–æ–ª–∞ —Ç–µ–∫—Å—Ç–∞
                )
                results.append(result)
                dreams_list.append(dream)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if not results:
        await message.answer(i18n.search.noresults())
        await state.finish()
        return

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if len(results) > MAX_RESULTS:
        results = results[:MAX_RESULTS]
        await message.answer(i18n.search.too_many_results())

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
    logger.info(f"User {user_id} searched for: {query}. Found {len(results)} results.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    response = i18n.search.results_header() + "\n\n" + "\n\n".join(results)
    await message.answer(response, reply_markup=kb.dreams_list(dreams_list))

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    await state.clear()
