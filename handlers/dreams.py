import logging 

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from fluentogram import TranslatorRunner
from datetime import datetime

from keyboards import keyboards as kb
from utils import CalendarSG, db, cache_object, get_cache, is_emoji


dreams_router = Router()
logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')


@dreams_router.callback_query(F.data == 'dreams')
async def dreams_menu(callback: CallbackQuery,
                      state: FSMContext,
                      i18n: TranslatorRunner):
    
    await state.clear()
    try:
        await callback.message.edit_text(i18n.dreams.menu(), reply_markup=kb.dreams_menu(i18n))
    except TelegramBadRequest:
        await callback.message.answer(i18n.dreams.menu(), reply_markup=kb.dreams_menu(i18n))


@dreams_router.callback_query(F.data == "dreams_pages")
async def show_dreams(callback: CallbackQuery, 
                      i18n: TranslatorRunner, 
                      state: FSMContext):
    
    await state.update_data(source='dreams_pages')
    user_id = callback.from_user.id
    page = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    dreams_per_page = 10

    try:
        total_dreams = await db.count_total_dreams(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–Ω–æ–≤ —Å id –∏ content
        dreams = await db.get_last_dreams(user_id, dreams_per_page, page * dreams_per_page)
        
        if not dreams:
            await callback.message.edit_text(i18n.dreams.empty())
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(page=page, total_dreams=total_dreams)
        
        # –°–æ–∑–¥–∞—ë–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = kb.create_dreams_keyboard(dreams, page, total_dreams, i18n)
        await callback.message.edit_text(i18n.dreams.list(), reply_markup=keyboard)
    
    except Exception as e:
        await callback.message.edit_text(i18n.error.generic())
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_dreams: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
@dreams_router.callback_query(F.data.startswith("dreams_page_"))
async def switch_dreams_page(callback: CallbackQuery, 
                             i18n: TranslatorRunner, 
                             state: FSMContext):
    
    user_id = callback.from_user.id
    dreams_per_page = 10
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback.data.split("_")[-1])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        total_dreams = data.get("total_dreams", 0)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        dreams = await db.get_last_dreams(user_id, dreams_per_page, page * dreams_per_page)
        
        if not dreams:
            await callback.message.edit_text(i18n.nodreams())
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(page=page)
        
        # –°–æ–∑–¥–∞—ë–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = kb.create_dreams_keyboard(dreams, page, total_dreams, i18n)
        await callback.message.edit_text(i18n.dreams.list(), reply_markup=keyboard)
    
    except Exception as e:
        await callback.message.edit_text(i18n.error.generic())
        logger.error(f"–û—à–∏–±–∫–∞ –≤ switch_dreams_page: {e}")


@dreams_router.callback_query(F.data == 'calendar')
async def calendar_inline(callback: CallbackQuery,
                          state: FSMContext,
                          i18n: TranslatorRunner):
    
    await state.clear()
    now = datetime.now()
    year, month = now.year, now.month  # –¢–µ–∫—É—â–∏–π –≥–æ–¥ –∏ –º–µ—Å—è—Ü
    user_id = callback.from_user.id

    logger.info(f"Current month: {year}-{month}")

    try:
        await db.load_month(user_id, int(year), int(month))
    except Exception as e:
        logger.error(f"Error loading data for user {user_id}, year {year}, month {month}: {e}")
        await callback.message.edit_text(i18n.error.loading_data(), 
                                         reply_markup=kb.back_to_menu(i18n))
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    keyboard = kb.calendar(int(year), int(month), i18n, user_id)
    try:
        await callback.message.edit_text(i18n.calendar(), reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.answer(i18n.calendar(), reply_markup=keyboard)


@dreams_router.callback_query(F.data.startswith('calendar_'))
async def calendar_inline(callback: CallbackQuery,
                          state: FSMContext,
                          i18n: TranslatorRunner):
    
    await state.clear()
    _, year, month = callback.data.split('_')
    user_id = callback.from_user.id

    logger.info(f"Current month: {year}-{month}")

    try:
        await db.load_month(user_id, int(year), int(month))
    except Exception as e:
        logger.error(f"Error loading data for user {user_id}, year {year}, month {month}: {e}")
        await callback.message.answer(i18n.error.loading_data())
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    keyboard = kb.calendar(int(year), int(month), i18n, user_id)

    try:
        await callback.message.edit_text(i18n.calendar(), reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.answer()


@dreams_router.callback_query(F.data.startswith('day_'))
async def day_inline(callback: CallbackQuery,
                     state: FSMContext,
                     i18n: TranslatorRunner):
    
    await state.clear()
    await state.update_data(source='calendar')
    _, year, month, day = callback.data.split('_')
    selected_date = f"{year}-{month}-{day}"
    user_id = callback.from_user.id 
    dreams_cache = get_cache(user_id)
    
    logger.info(f"USER: {user_id} - Selected day: {day}, month: {month}, year: {year}")

    try:
        dreams = dreams_cache[day]
    except KeyError:
        await callback.message.edit_text(i18n.no.dreams(selected_date=selected_date), 
                                         reply_markup=kb.back_to_calendar(i18n))
        return

    logger.info(f"Dreams of user {user_id}: {dreams}")

    if not dreams:
        try:
            await callback.message.edit_text(i18n.no.dreams(selected_date=selected_date), 
                                             reply_markup=kb.back_to_calendar(i18n))
        except TelegramBadRequest:
            await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–ø–∏—Å—è–º–∏
    keyboard = kb.dreams_list(i18n, dreams)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        await callback.message.edit_text(i18n.dreams.day(selected_date=selected_date), reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.answer()


@dreams_router.callback_query(F.data.startswith('dream_'))
async def dream_inline(callback: CallbackQuery, 
                       state: FSMContext,
                       i18n: TranslatorRunner):
    
    state_data = await state.get_data()
    source = state_data['calendar']

    await state.clear()
    user_id = callback.from_user.id
    dream_id = callback.data[6:]
    user_cache = get_cache(user_id)

    logger.info(f"User {user_id} select dream {dream_id}")

    try:
        dreams_dict = {str(dream[0]): dream for day, dreams in user_cache.items() for dream in dreams}
    except KeyError:
        await callback.message.edit_text(i18n.dream.notfound(), 
                                         reply_markup=kb.back_to_calendar(i18n))
        return
    
    found_dream = dreams_dict.get(dream_id)

    if not found_dream:
        try:
            await callback.message.edit_text(i18n.dream.notfound(), 
                                             reply_markup=kb.back_to_calendar(i18n))
        except TelegramBadRequest:
            await callback.answer()
        return

    dream_id, title, content, emoji, comment, cover, create_time = found_dream
    message_text = (
        f"üìÖ {create_time.strftime('%Y-%m-%d %H:%M')}\n"
        f"{emoji} {title} {emoji}\n\n"
        f"üìù {content}\n\n"
        f"{comment}"
    )

    if cover:
        await callback.message.answer_photo(cover, 
                                            caption=message_text, 
                                            reply_markup=kb.dream_edit(i18n, dream_id, source))
    else:
        await callback.message.answer(message_text, 
                                      reply_markup=kb.dream_edit(i18n, dream_id, source))
    await callback.answer()


@dreams_router.callback_query(F.data.startswith('edit_'))
async def edit_dream_menu(callback: CallbackQuery,
                          state: FSMContext,
                          i18n: TranslatorRunner):
    
    user_id = callback.from_user.id
    action = callback.data[:8]
    dream_id = callback.data[9:]

    logger.info(f'EDIT_ button. callback: {callback.data}; action: {action}')

    await state.update_data(dream_id=str(dream_id))
    await state.update_data(edit_action=action)

    # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_cache = get_cache(user_id)

    # –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ dream_id
    found_dream = None
    for day, dreams in user_cache.items():
        for dream in dreams:
            if str(dream[0]) == str(dream_id):  # dream[0] ‚Äî —ç—Ç–æ id –∑–∞–ø–∏—Å–∏
                found_dream = dream
                break
        if found_dream:
            break

    if not found_dream:
        try:
            await callback.message.edit_text(i18n.dream.notfound(), 
                                             reply_markup=kb.back_to_dream(i18n, dream_id))
        except TelegramBadRequest:
            await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–ø–∏—Å–∏
    dream_id, title, content, emoji, comment, cover, create_time = found_dream

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if action == "edit_con":
        await state.set_state(CalendarSG.edit_con)
        await callback.message.answer(content)
        await callback.message.answer(i18n.newcontent(), 
                                      reply_markup=kb.back_to_dream(i18n, dream_id))

    elif action == "edit_tit":
        await state.set_state(CalendarSG.edit_tit)
        if title == "" or title is None:
            await callback.message.answer(i18n.notitle())
        else:
            await callback.message.answer(title)
        await callback.message.answer(i18n.newtitle(), 
                                      reply_markup=kb.back_to_dream(i18n, dream_id))

    elif action == "edit_com":
        await state.set_state(CalendarSG.edit_com)
        if comment == "" or comment is None:
            await callback.message.answer(i18n.nocomment())
        else:
            await callback.message.answer(comment)
        await callback.message.answer(i18n.newcomment(), 
                                      reply_markup=kb.back_to_dream(i18n, dream_id))

    elif action == "edit_cov":
        logger.info(f'EDIT_COVER ACTION')
        await state.set_state(CalendarSG.edit_cov)
        if cover == "" or cover is None:
            await callback.message.answer(i18n.nocover())
        else:
            await callback.message.answer_photo(cover)
        await callback.message.answer(i18n.newcover(), 
                                      reply_markup=kb.back_to_dream(i18n, dream_id))

    elif action == "edit_emo":
        await state.set_state(CalendarSG.edit_emo)
        if emoji == "" or emoji is None:
            await callback.message.answer(i18n.noemoji())
        else:
            await callback.message.answer(emoji)
        await callback.message.answer(i18n.newemoji(), 
                                      reply_markup=kb.back_to_dream(i18n, dream_id))

    await callback.answer()


@dreams_router.message(CalendarSG.edit_con)
async def edit_content(message: Message, 
                       state: FSMContext,
                       i18n: TranslatorRunner):
    
    user_id = message.from_user.id
    new_content = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    if len(new_content) > 4096:
        await message.answer(i18n.toolong.content())
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, dream_id)
    data = await state.get_data()
    dream_id = data.get("dream_id")

    await db.update_content(new_content, int(dream_id), user_id)
    await state.clear()
    await message.answer(i18n.content.updated(), 
                         reply_markup=kb.back_to_dream(i18n, dream_id))


@dreams_router.message(CalendarSG.edit_tit)
async def edit_title(message: Message, 
                     state: FSMContext,
                     i18n: TranslatorRunner):
    
    user_id = message.from_user.id
    new_title = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if len(new_title) > 64:
        await message.answer(i18n.toolong.title())
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, dream_id)
    data = await state.get_data()
    dream_id = data.get("dream_id")

    await db.update_title(new_title, int(dream_id), user_id)
    await state.clear()
    await message.answer(i18n.title.updated(), 
                         reply_markup=kb.back_to_dream(i18n, dream_id))


@dreams_router.message(CalendarSG.edit_com)
async def edit_comment(message: Message, 
                       state: FSMContext,
                       i18n: TranslatorRunner):
    
    user_id = message.from_user.id
    new_comment = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    if len(new_comment) > 128:
        await message.answer(i18n.toolong.comment())
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, dream_id)
    data = await state.get_data()
    dream_id = data.get("dream_id")

    await db.update_comment(new_comment, int(dream_id), user_id)
    await state.clear()
    await message.answer(i18n.comment.updated(), 
                         reply_markup=kb.back_to_dream(i18n, dream_id))


@dreams_router.message(CalendarSG.edit_cov)
async def edit_image(message: Message, 
                     state: FSMContext,
                     i18n: TranslatorRunner):

    logger.info(f'EDIT COVER ROUTER')

    user_id = message.from_user.id
    image_url = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É)
    if not image_url.startswith(("http://", "https://")):
        await message.answer(i18n.incorrect.url())
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, dream_id)
    data = await state.get_data()
    dream_id = data.get("dream_id")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.update_cover(image_url, int(dream_id), user_id)
    await state.clear()
    await message.answer(i18n.cover.updated(), 
                         reply_markup=kb.back_to_dream(i18n, dream_id))


@dreams_router.message(CalendarSG.edit_emo)
async def edit_emoji(message: Message, 
                     state: FSMContext,
                     i18n: TranslatorRunner):
    
    user_id = message.from_user.id
    new_emoji = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —ç–º–æ–¥–∑–∏
    if len(new_emoji) > 4:
        await message.answer(i18n.toolong.emoji())
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî —ç—Ç–æ —ç–º–æ–¥–∑–∏
    if not is_emoji(new_emoji):
        await message.answer(i18n.notemoji())
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, dream_id)
    data = await state.get_data()
    dream_id = data.get("dream_id")

    await db.update_emoji(new_emoji, int(dream_id), user_id)
    await state.clear()
    await message.answer(i18n.emoji.updated(), 
                         reply_markup=kb.back_to_dream(i18n, dream_id))
    

@dreams_router.callback_query(F.data.startswith('delete_'))
async def delete_handler(callback: CallbackQuery,
                         i18n: FSMContext):
    
    _, dream_id = callback.data.split('_')
    await callback.message.answer(i18n.confirm.delete(), 
                                  reply_markup=kb.delete_dream(i18n, dream_id))
    await callback.answer()


@dreams_router.callback_query(F.data.startswith('confirm_'))
async def delete_confirm_handler(callback: CallbackQuery,
                                 i18n: TranslatorRunner):
    try:
        _, dream_id = callback.data.split('_')
        dream_id = int(dream_id)

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        await db.delete_dream(dream_id)
        await callback.message.edit_text(
            i18n.complete.delete(),
            reply_markup=kb.back_to_calendar(i18n)
        )

    except ValueError:
        await callback.message.edit_text(
            i18n.dream.notfound() or "–°–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=kb.back_to_calendar(i18n)
        )
    except Exception as e:
        await callback.message.edit_text(
            i18n.dream.notfound() or "–°–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=kb.back_to_calendar(i18n)
        )
    except TelegramBadRequest:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    finally:
        await callback.answer()
    

@dreams_router.callback_query(F.data == 'ignore')
async def ignore_handler(callback: CallbackQuery):
    await callback.answer()
